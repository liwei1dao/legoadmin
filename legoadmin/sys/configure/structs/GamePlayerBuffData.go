
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type GamePlayerBuffData struct {
    Id int32
    Num int32
    Moneymin int32
    Moneymax int32
    Normalloselv int32
    Cwinprofitratio int32
    Closelvmin int32
    Cwinlvmax int32
}

const TypeId_GamePlayerBuffData = 587392336

func (*GamePlayerBuffData) GetTypeId() int32 {
    return 587392336
}

func NewGamePlayerBuffData(_buf map[string]interface{}) (_v *GamePlayerBuffData, err error) {
    _v = &GamePlayerBuffData{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["num"].(float64); !_ok_ { err = errors.New("num error"); return }; _v.Num = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["moneymin"].(float64); !_ok_ { err = errors.New("moneymin error"); return }; _v.Moneymin = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["moneymax"].(float64); !_ok_ { err = errors.New("moneymax error"); return }; _v.Moneymax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["normalloselv"].(float64); !_ok_ { err = errors.New("normalloselv error"); return }; _v.Normalloselv = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cwinprofitratio"].(float64); !_ok_ { err = errors.New("cwinprofitratio error"); return }; _v.Cwinprofitratio = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["closelvmin"].(float64); !_ok_ { err = errors.New("closelvmin error"); return }; _v.Closelvmin = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cwinlvmax"].(float64); !_ok_ { err = errors.New("cwinlvmax error"); return }; _v.Cwinlvmax = int32(_tempNum_) }
    return
}

