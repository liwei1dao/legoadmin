
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type GameDJ002ConfData struct {
    Id int32
    Gnum int32
    Layer int32
    Multiple float64
    Nullweight int32
    Nweight int32
    Winweight int32
    Loseweight int32
}

const TypeId_GameDJ002ConfData = 1504682536

func (*GameDJ002ConfData) GetTypeId() int32 {
    return 1504682536
}

func NewGameDJ002ConfData(_buf map[string]interface{}) (_v *GameDJ002ConfData, err error) {
    _v = &GameDJ002ConfData{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["gnum"].(float64); !_ok_ { err = errors.New("gnum error"); return }; _v.Gnum = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["layer"].(float64); !_ok_ { err = errors.New("layer error"); return }; _v.Layer = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["multiple"].(float64); !_ok_ { err = errors.New("multiple error"); return }; _v.Multiple = float64(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["nullweight"].(float64); !_ok_ { err = errors.New("nullweight error"); return }; _v.Nullweight = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["nweight"].(float64); !_ok_ { err = errors.New("nweight error"); return }; _v.Nweight = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["winweight"].(float64); !_ok_ { err = errors.New("winweight error"); return }; _v.Winweight = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["loseweight"].(float64); !_ok_ { err = errors.New("loseweight error"); return }; _v.Loseweight = int32(_tempNum_) }
    return
}

