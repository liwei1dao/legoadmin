
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type GamePlayerLvData struct {
    Id int32
    Lv int32
    Vip int32
    Liftbetmin int32
    Liftbetmax int32
    Multiple int32
    Killratemax int32
    Cbase int32
    Killratemaxmodulus int32
    Controllvmin int32
    Controllvmax int32
    Normalloseratio int32
    Normalcwinlvmax int32
    Normalcloselvmax int32
    Cwinprofitratio int32
    Cwinmodulus int32
    Cwinlvmin int32
    Cwinlvmax int32
    Continuouswinlosenum int32
    Continuouswinloselv int32
    Newplayercwinnum int32
}

const TypeId_GamePlayerLvData = -812630073

func (*GamePlayerLvData) GetTypeId() int32 {
    return -812630073
}

func NewGamePlayerLvData(_buf map[string]interface{}) (_v *GamePlayerLvData, err error) {
    _v = &GamePlayerLvData{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["lv"].(float64); !_ok_ { err = errors.New("lv error"); return }; _v.Lv = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["vip"].(float64); !_ok_ { err = errors.New("vip error"); return }; _v.Vip = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["liftbetmin"].(float64); !_ok_ { err = errors.New("liftbetmin error"); return }; _v.Liftbetmin = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["liftbetmax"].(float64); !_ok_ { err = errors.New("liftbetmax error"); return }; _v.Liftbetmax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["multiple"].(float64); !_ok_ { err = errors.New("multiple error"); return }; _v.Multiple = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["killratemax"].(float64); !_ok_ { err = errors.New("killratemax error"); return }; _v.Killratemax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cbase"].(float64); !_ok_ { err = errors.New("cbase error"); return }; _v.Cbase = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["killratemaxmodulus"].(float64); !_ok_ { err = errors.New("killratemaxmodulus error"); return }; _v.Killratemaxmodulus = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["controllvmin"].(float64); !_ok_ { err = errors.New("controllvmin error"); return }; _v.Controllvmin = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["controllvmax"].(float64); !_ok_ { err = errors.New("controllvmax error"); return }; _v.Controllvmax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["normalloseratio"].(float64); !_ok_ { err = errors.New("normalloseratio error"); return }; _v.Normalloseratio = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["normalcwinlvmax"].(float64); !_ok_ { err = errors.New("normalcwinlvmax error"); return }; _v.Normalcwinlvmax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["normalcloselvmax"].(float64); !_ok_ { err = errors.New("normalcloselvmax error"); return }; _v.Normalcloselvmax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cwinprofitratio"].(float64); !_ok_ { err = errors.New("cwinprofitratio error"); return }; _v.Cwinprofitratio = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cwinmodulus"].(float64); !_ok_ { err = errors.New("cwinmodulus error"); return }; _v.Cwinmodulus = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cwinlvmin"].(float64); !_ok_ { err = errors.New("cwinlvmin error"); return }; _v.Cwinlvmin = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["cwinlvmax"].(float64); !_ok_ { err = errors.New("cwinlvmax error"); return }; _v.Cwinlvmax = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["continuouswinlosenum"].(float64); !_ok_ { err = errors.New("continuouswinlosenum error"); return }; _v.Continuouswinlosenum = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["continuouswinloselv"].(float64); !_ok_ { err = errors.New("continuouswinloselv error"); return }; _v.Continuouswinloselv = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["newplayercwinnum"].(float64); !_ok_ { err = errors.New("newplayercwinnum error"); return }; _v.Newplayercwinnum = int32(_tempNum_) }
    return
}

